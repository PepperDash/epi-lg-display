name: Branch Build Using Docker

on:
  push:
    branches:
      - feature/*
      - hotfix/*
      - release/*
      - dev*

env:
  SOLUTION_PATH: epi-display-lg\
  SOLUTION_FILE: epi-display-lg
  VERSION: 0.0.0-buildtype-buildnumber
  BUILD_TYPE: Debug
  RELEASE_BRANCH: main

jobs:
  Build_Project:
    runs-on: windows-2019
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Fetch tags
        run: git fetch --tags

      - name: Set Version Number
        shell: powershell
        run: |
          $version = ./.github/scripts/GenerateVersionNumber.ps1          
          echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Update AssemblyInfo.cs
        shell: powershell
        run: |
          Write-Output ${{ env.VERSION }}
          ./.github/scripts/UpdateAssemblyVersion.ps1 ${{ env.VERSION }}

      - name: restore Nuget Packages
        run: nuget install .\packages.config -OutputDirectory .\packages -ExcludeVersion

      - name: Login to Docker
        uses: azure/docker-login@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build Solution
        shell: powershell
        run: |
          Invoke-Expression "docker run --rm --mount type=bind,source=""$($Env:GITHUB_WORKSPACE)"",target=""c:/project"" pepperdash/sspbuilder c:\cihelpers\vsidebuild.exe -Solution ""c:\project\$($Env:SOLUTION_PATH)$($Env:SOLUTION_FILE).sln"" -BuildSolutionConfiguration $($ENV:BUILD_TYPE)"

      - name: Zip Build Output
        shell: powershell
        run: ./.github/scripts/ZipBuildOutput.ps1

      - name: Write Version
        run: Write-Output "$($Env:VERSION)" | Out-File -FilePath "$($Env:GITHUB_HOME)\output\version.txt"

      - name: Upload Build Output
        uses: actions/upload-artifact@v4
        with:
          name: Build
          path: ./${{ env.SOLUTION_FILE}}-${{ env.VERSION}}.zip

      - name: Upload version.txt
        uses: actions/upload-artifact@v4
        with:
          name: Version
          path: ${{env.GITHUB_HOME}}\output\version.txt

      - name: Create Release
        id: create_release
        uses: fleskesvor/create-release@feature/support-target-commitish
        with:
          tag_name: ${{ env.VERSION  }}
          release_name: ${{ env.VERSION }}
          prerelease: ${{contains('debug', env.BUILD_TYPE)}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Package
        id: upload_release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.SOLUTION_FILE}}-${{ env.VERSION}}.zip
          asset_name: ${{ env.SOLUTION_FILE}}-${{ env.VERSION}}.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  Push_Nuget_Package:
    needs: Build_Project
    runs-on: windows-latest
    steps:
      - name: Download Build Version Info
        uses: actions/download-artifact@v4
        with:
          name: Version

      - name: Set Version Number
        shell: powershell
        run: |
          Get-ChildItem "./Version"
          $version = Get-Content -Path ./Version/version.txt
          Write-Host "Version: $version"
          echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Remove-Item -Path ./Version/version.txt
          Remove-Item -Path ./Version

      - name: Download Build output
        uses: actions/download-artifact@v4
        with:
          name: Build
          path: ./

      - name: Unzip Build file
        run: |
          Get-ChildItem .\*.zip | Expand-Archive -DestinationPath .\
          Remove-Item -Path .\*.zip

      - name: Copy Files to root & delete output directory
        run: |
          Remove-Item -Path .\* -Include @("*.cpz","*.md","*.cplz","*.json","*.dll","*.clz")  
          Get-ChildItem -Path .\output\* | Copy-Item -Destination .\
          Remove-Item -Path .\output -Recurse

      - name: Add nuget.exe
        uses: nuget/setup-nuget@v1

      - name: Add Github Packages source
        run: nuget sources add -name github -source https://nuget.pkg.github.com/pepperdash/index.json -username Pepperdash -password ${{ secrets.GITHUB_TOKEN }}

      - name: Add nuget.org API Key
        run: nuget setApiKey ${{ secrets.NUGET_API_KEY }}

      - name: Create nuget package
        run: nuget pack "./${{ env.SOLUTION_FILE}}.nuspec" -version ${{ env.VERSION }}

      - name: Publish nuget package to Github registry
        run: nuget push **/*.nupkg -source github

      - name: Publish nuget package to nuget.org
        run: nuget push **/*.nupkg -Source https://api.nuget.org/v3/index.json
